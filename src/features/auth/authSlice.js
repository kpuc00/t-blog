import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { login } from "./authAPI";

const initialState = {
  loading: false,
  signedIn: false,
  user: undefined,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginUser = createAsyncThunk(
  "auth/loginUser",
  async (params, thunkAPI) => {
    const response = await login(params.email, params.password);
    // The value we return becomes the `fulfilled` action payload
    const data = await response.json();
    console.log(data);
    return data;
  }
);

export const authSlice = createSlice({
  name: "auth",
  initialState,
  reducers: {
    authLoading(state) {
      if (!state.loading) state.loading = true;
    },
    setSignedIn(state) {
      if (!state.signedIn) state.signedIn = true;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(loginUser.pending, (state) => {
        state.status = true;
      })
      .addCase(loginUser.fulfilled, (state, action) => {
        state.status = false;
        state.user = action.payload;
        !action.payload.status
          ? (state.signedIn = true)
          : (state.status = false);
      });
  },
});

// Action creators are generated for each case reducer function
export const { authLoading, setSignedIn } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectSignedIn = (state) => state.auth.signedIn;
export const selectUser = (state) => state.auth.user;
export const selectLoading = (state) => state.auth.loading;

export default authSlice.reducer;
